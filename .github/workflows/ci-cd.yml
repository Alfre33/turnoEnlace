name: CI/CD (develop → uat → main)

on:
  pull_request:
    branches: [develop, uat, main]
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [develop, uat, main]
  workflow_dispatch:

jobs:
  ci:
    name: CI (lint, test, build)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Mock Node: cambia por tu stack (composer/phpunit, etc.)
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps (mock)
        run: |
          if [ -f package.json ]; then
            npm ci
          else
            echo "No package.json → skipping npm ci"
          fi

      - name: Lint (mock)
        run: |
          if [ -f package.json ]; then
            npm run lint --if-present
          else
            echo "No lint step → skipping"
          fi

      - name: Test (mock)
        run: |
          if [ -f package.json ]; then
            npm test --if-present -- --ci
          else
            echo "No tests → skipping"
          fi

      - name: Build (mock)
        run: |
          mkdir -p out
          if [ -f package.json ]; then
            npm run build --if-present
            echo "artifact" > out/ok.txt
          else
            echo "no-build" > out/ok.txt
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: out/

  determine-env:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [ci]
    outputs:
      env: ${{ steps.map.outputs.env }}
      pretty: ${{ steps.map.outputs.pretty }}
    steps:
      - id: map
        run: |
          REF="${GITHUB_REF_NAME}"
          if [ "$REF" = "develop" ]; then
            ENV="dev"; PRETTY="Development";
          elif [ "$REF" = "uat" ]; then
            ENV="uat"; PRETTY="UAT";
          elif [ "$REF" = "main" ]; then
            ENV="production"; PRETTY="Production";
          else
            echo "Not a deploy branch"; exit 78;
          fi
          echo "env=$ENV" >> $GITHUB_OUTPUT
          echo "pretty=$PRETTY" >> $GITHUB_OUTPUT

  deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [ci, determine-env]
    environment:
      name: ${{ needs.determine-env.outputs.env }}
      url: ${{ vars.APP_URL }}
    concurrency:
      group: deploy-${{ needs.determine-env.outputs.env }}
      cancel-in-progress: false
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: app-build
          path: ./artifact

      - name: Mock deploy to ${{ needs.determine-env.outputs.pretty }}
        env:
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
          DEPLOY_ENDPOINT: ${{ vars.DEPLOY_ENDPOINT }}
        run: |
          echo "### MOCK DEPLOY ###"
          echo "Branch: $GITHUB_REF_NAME"
          echo "Commit: $GITHUB_SHA"
          echo "Env:    ${{ needs.determine-env.outputs.pretty }}"
          echo "URL:    ${{ vars.APP_URL }}"
          echo "POST -> ${DEPLOY_ENDPOINT}/deploy (token masked)"
          # ← Reemplaza por tu deploy real (Forge, SSH, Docker, Vercel, etc.)
          # curl -H "Authorization: Bearer ${DEPLOY_TOKEN}" \
          #      -X POST "${DEPLOY_ENDPOINT}/deploy?commit=${GITHUB_SHA}"

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Compute version (mock)
        run: |
          VERSION="v$(date +'%Y.%m.%d').${GITHUB_RUN_NUMBER}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::notice::Drafting release $VERSION"
      - name: Create GitHub Release (draft)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          draft: true
          name: Release ${{ env.VERSION }}
          body: |
            Auto-draft from ${{ github.sha }}.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync-back:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Open PR main → uat
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create --base uat --head main \
            --title "sync: main → uat" \
            --body "Sync after production deploy" || echo "PR may already exist"
      - name: Open PR main → develop
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create --base develop --head main \
            --title "sync: main → develop" \
            --body "Sync after production deploy" || echo "PR may already exist"
